name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  setup:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/Jod
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  lint-test-sonar:
    name: Run Lint, Tests & SonarQube
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        job: [lint, test, sonar]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/Jod

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Run Lint
        if: matrix.job == 'lint'
        run: npm run lint

      - name: Run Tests
        if: matrix.job == 'test'
        run: npm run test:cov

      - name: SonarQube Scan
        if: matrix.job == 'sonar' && github.event_name == 'push'
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
